import 'package:flutter/foundation.dart';
import 'package:sqflite/sqflite.dart' as sql;

class SQLHelper {
  static Future<void> createTables(sql.Database database) async {
    await database.execute("""CREATE TABLE nasabah(
        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        nama TEXT,
        description TEXT
      )
      """);
    await database.execute("""CREATE TABLE daftarkategori(
        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        kategori TEXT NOT NULL
      )
      """);
    await database.execute("""CREATE TABLE daftarsubkategori(
        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        idkategori INTEGER NOT NULL,
        subkategori TEXT NOT NULL,
        satuan TEXT NOT NULL,
        hargapersatuan REAL NOT NULL 
      )
      """);
    await database.execute("""CREATE TABLE setoran(
        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        idtglsetor INTEGER NOT NULL,
        idsubkategori INTEGER NOT NULL,
        jumlah REAL NOT NULL
      )  
      """);
    await database.execute("""CREATE TABLE tglsetor(
        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        idnasabah INTEGER NOT NULL,
        createdAt TEXT NOT NULL
      )  
      """);
    await database.execute("""CREATE TABLE pengaturan(
        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        aturan TEXT NOT NULL,
        nilai TEXT NOT NULL
      )  
      """);
    await database.rawInsert("""INSERT INTO pengaturan (id, aturan, nilai) VALUES
        (1, 'namabank', 'CSJ'),
        (2, 'alamat', 'Jalan Jombang, Kel. Jombang, Kec. Ciputat, Kota Tangerang Selatan'),
        (3, 'namalingkungan', 'Cluster Sudimara'),
        (4, 'contactperson', 'Evi (085111111xxx)');
      """);
    await database.rawInsert("""INSERT INTO tglsetor (id, idnasabah, createdAt) VALUES
        (1, 1, '2024-01-14T09:05:00.000Z'),
        (2, 1, '2024-01-15T09:05:00.000Z'),
        (3, 1, '2024-01-16T09:05:00.000Z'),
        (4, 1, '2024-01-17T09:05:00.000Z'),
        (5, 1, '2024-01-18T09:05:00.000Z'),
        (6, 1, '2024-01-19T09:05:00.000Z'),
        (7, 1, '2024-01-20T09:05:00.000Z'),
        (8, 1, '2024-01-21T09:05:00.000Z'),
        (9, 1, '2024-01-22T09:05:00.000Z'),
        (10, 1, '2024-01-23T09:05:00.000Z'),
        (11, 2, '2024-01-14T09:05:00.000Z'),
        (12, 2, '2024-01-15T09:05:00.000Z'),
        (13, 2, '2024-01-16T09:05:00.000Z'),
        (14, 2, '2024-01-17T09:05:00.000Z'),
        (15, 2, '2024-01-18T09:05:00.000Z'),
        (16, 2, '2024-01-19T09:05:00.000Z'),
        (17, 2, '2024-01-20T09:05:00.000Z'),
        (18, 2, '2024-01-21T09:05:00.000Z'),
        (19, 2, '2024-01-22T09:05:00.000Z'),
        (20, 2, '2024-01-23T09:05:00.000Z'),
        (21, 3, '2024-01-14T09:05:00.000Z'),
        (22, 3, '2024-01-15T09:05:00.000Z'),
        (23, 3, '2024-01-16T09:05:00.000Z'),
        (24, 3, '2024-01-17T09:05:00.000Z'),
        (25, 3, '2024-01-18T09:05:00.000Z'),
        (26, 3, '2024-01-19T09:05:00.000Z'),
        (27, 3, '2024-01-20T09:05:00.000Z'),
        (28, 3, '2024-01-21T09:05:00.000Z'),
        (29, 3, '2024-01-22T09:05:00.000Z'),
        (30, 3, '2024-01-23T09:05:00.000Z'),
        (31, 4, '2024-01-14T09:05:00.000Z'),
        (32, 4, '2024-01-15T09:05:00.000Z'),
        (33, 4, '2024-01-16T09:05:00.000Z'),
        (34, 4, '2024-01-17T09:05:00.000Z'),
        (35, 4, '2024-01-18T09:05:00.000Z'),
        (36, 4, '2024-01-19T09:05:00.000Z'),
        (37, 4, '2024-01-20T09:05:00.000Z'),
        (38, 4, '2024-01-21T09:05:00.000Z'),
        (39, 4, '2024-01-22T09:05:00.000Z'),
        (40, 4, '2024-01-23T09:05:00.000Z'),
        (41, 5, '2024-01-14T09:05:00.000Z'),
        (42, 5, '2024-01-15T09:05:00.000Z'),
        (43, 5, '2024-01-16T09:05:00.000Z'),
        (44, 5, '2024-01-17T09:05:00.000Z'),
        (45, 5, '2024-01-18T09:05:00.000Z'),
        (46, 5, '2024-01-19T09:05:00.000Z'),
        (47, 5, '2024-01-20T09:05:00.000Z'),
        (48, 5, '2024-01-21T09:05:00.000Z'),
        (49, 5, '2024-01-22T09:05:00.000Z'),
        (50, 5, '2024-01-23T09:05:00.000Z'),
        (51, 6, '2024-01-14T09:05:00.000Z'),
        (52, 6, '2024-01-15T09:05:00.000Z'),
        (53, 6, '2024-01-16T09:05:00.000Z'),
        (54, 6, '2024-01-17T09:05:00.000Z'),
        (55, 6, '2024-01-18T09:05:00.000Z'),
        (56, 6, '2024-01-19T09:05:00.000Z'),
        (57, 6, '2024-01-20T09:05:00.000Z'),
        (58, 6, '2024-01-21T09:05:00.000Z'),
        (59, 6, '2024-01-22T09:05:00.000Z'),
        (60, 6, '2024-01-23T09:05:00.000Z'),
        (61, 7, '2024-01-14T09:05:00.000Z'),
        (62, 7, '2024-01-15T09:05:00.000Z'),
        (63, 7, '2024-01-16T09:05:00.000Z'),
        (64, 7, '2024-01-17T09:05:00.000Z'),
        (65, 7, '2024-01-18T09:05:00.000Z'),
        (66, 7, '2024-01-19T09:05:00.000Z'),
        (67, 7, '2024-01-20T09:05:00.000Z'),
        (68, 7, '2024-01-21T09:05:00.000Z'),
        (69, 7, '2024-01-22T09:05:00.000Z'),
        (70, 7, '2024-01-23T09:05:00.000Z'),
        (71, 8, '2024-01-14T09:05:00.000Z'),
        (72, 8, '2024-01-15T09:05:00.000Z'),
        (73, 8, '2024-01-16T09:05:00.000Z'),
        (74, 8, '2024-01-17T09:05:00.000Z'),
        (75, 8, '2024-01-18T09:05:00.000Z'),
        (76, 8, '2024-01-19T09:05:00.000Z'),
        (77, 8, '2024-01-20T09:05:00.000Z'),
        (78, 8, '2024-01-21T09:05:00.000Z'),
        (79, 8, '2024-01-22T09:05:00.000Z'),
        (80, 8, '2024-01-23T09:05:00.000Z'),
        (81, 9, '2024-01-14T09:05:00.000Z'),
        (82, 9, '2024-01-15T09:05:00.000Z'),
        (83, 9, '2024-01-16T09:05:00.000Z'),
        (84, 9, '2024-01-17T09:05:00.000Z'),
        (85, 9, '2024-01-18T09:05:00.000Z'),
        (86, 9, '2024-01-19T09:05:00.000Z'),
        (87, 9, '2024-01-20T09:05:00.000Z'),
        (88, 9, '2024-01-21T09:05:00.000Z'),
        (89, 9, '2024-01-22T09:05:00.000Z'),
        (90, 9, '2024-01-23T09:05:00.000Z'),
        (91, 10, '2024-01-14T09:05:00.000Z'),
        (92, 10, '2024-01-15T09:05:00.000Z'),
        (93, 10, '2024-01-16T09:05:00.000Z'),
        (94, 10, '2024-01-17T09:05:00.000Z'),
        (95, 10, '2024-01-18T09:05:00.000Z'),
        (96, 10, '2024-01-19T09:05:00.000Z'),
        (97, 10, '2024-01-20T09:05:00.000Z'),
        (98, 10, '2024-01-21T09:05:00.000Z'),
        (99, 10, '2024-01-22T09:05:00.000Z'),
        (100, 10, '2024-01-23T09:05:00.000Z');
      """);
    await database.rawInsert("""INSERT INTO setoran (id, idtglsetor, idsubkategori, jumlah) VALUES
        (1, 1, 1, 1810.0),
        (2, 1, 2, 810.0),
        (3, 1, 3, 980.0),
        (4, 1, 5, 750.0),
        (5, 1, 9, 3000.0),
        (6, 1, 15, 580.0),
        (7, 1, 16, 2990.0),
        (8, 1, 17, 450.0),
        (9, 1, 21, 590.0),
        (10, 1, 25, 1460.0),
        (11, 1, 26, 510.0),
        (12, 1, 30, 1510.0),
        (13, 1, 37, 2300.0),
        (14, 2, 1, 1560.0),
        (15, 2, 2, 500.0),
        (16, 2, 3, 1290.0),
        (17, 2, 5, 2490.0),
        (18, 2, 9, 1730.0),
        (19, 2, 15, 2090.0),
        (20, 2, 16, 2280.0),
        (21, 2, 17, 990.0),
        (22, 2, 21, 590.0),
        (23, 2, 25, 430.0),
        (24, 2, 26, 1660.0),
        (25, 2, 30, 2970.0),
        (26, 2, 37, 770.0),
        (27, 3, 1, 160.0),
        (28, 3, 2, 3020.0),
        (29, 3, 3, 2000.0),
        (30, 3, 5, 2290.0),
        (31, 3, 9, 1340.0),
        (32, 3, 15, 1190.0),
        (33, 3, 16, 2610.0),
        (34, 3, 17, 1070.0),
        (35, 3, 21, 1780.0),
        (36, 3, 25, 350.0),
        (37, 3, 26, 430.0),
        (38, 3, 30, 1780.0),
        (39, 3, 37, 910.0),
        (40, 4, 1, 1150.0),
        (41, 4, 2, 1270.0),
        (42, 4, 3, 3100.0),
        (43, 4, 5, 410.0),
        (44, 4, 9, 1470.0),
        (45, 4, 15, 1320.0),
        (46, 4, 16, 3010.0),
        (47, 4, 17, 2670.0),
        (48, 4, 21, 1930.0),
        (49, 4, 25, 770.0),
        (50, 4, 26, 2470.0),
        (51, 4, 30, 2910.0),
        (52, 4, 37, 1310.0),
        (53, 5, 1, 2120.0),
        (54, 5, 2, 2320.0),
        (55, 5, 3, 1600.0),
        (56, 5, 5, 2710.0),
        (57, 5, 9, 2380.0),
        (58, 5, 15, 1510.0),
        (59, 5, 16, 3050.0),
        (60, 5, 17, 2520.0),
        (61, 5, 21, 1290.0),
        (62, 5, 25, 2330.0),
        (63, 5, 26, 1370.0),
        (64, 5, 30, 2190.0),
        (65, 5, 37, 2820.0),
        (66, 6, 1, 1150.0),
        (67, 6, 2, 580.0),
        (68, 6, 3, 910.0),
        (69, 6, 5, 1850.0),
        (70, 6, 9, 360.0),
        (71, 6, 15, 650.0),
        (72, 6, 16, 1320.0),
        (73, 6, 17, 170.0),
        (74, 6, 21, 2890.0),
        (75, 6, 25, 2550.0),
        (76, 6, 26, 1900.0),
        (77, 6, 30, 2280.0),
        (78, 6, 37, 2450.0),
        (79, 7, 1, 1400.0),
        (80, 7, 2, 1610.0),
        (81, 7, 3, 2400.0),
        (82, 7, 5, 610.0),
        (83, 7, 9, 1390.0),
        (84, 7, 15, 1050.0),
        (85, 7, 16, 2030.0),
        (86, 7, 17, 1210.0),
        (87, 7, 21, 1730.0),
        (88, 7, 25, 1600.0),
        (89, 7, 26, 710.0),
        (90, 7, 30, 1450.0),
        (91, 7, 37, 3030.0),
        (92, 8, 1, 2800.0),
        (93, 8, 2, 2990.0),
        (94, 8, 3, 1630.0),
        (95, 8, 5, 1470.0),
        (96, 8, 9, 2620.0),
        (97, 8, 15, 2300.0),
        (98, 8, 16, 2830.0),
        (99, 8, 17, 170.0),
        (100, 8, 21, 1520.0),
        (101, 8, 25, 330.0),
        (102, 8, 26, 2380.0),
        (103, 8, 30, 1060.0),
        (104, 8, 37, 560.0),
        (105, 9, 1, 2210.0),
        (106, 9, 2, 1470.0),
        (107, 9, 3, 2990.0),
        (108, 9, 5, 2770.0),
        (109, 9, 9, 1520.0),
        (110, 9, 15, 1420.0),
        (111, 9, 16, 3180.0),
        (112, 9, 17, 2040.0),
        (113, 9, 21, 440.0),
        (114, 9, 25, 2620.0),
        (115, 9, 26, 1950.0),
        (116, 9, 30, 2800.0),
        (117, 9, 37, 940.0),
        (118, 10, 1, 690.0),
        (119, 10, 2, 2240.0),
        (120, 10, 3, 3100.0),
        (121, 10, 5, 1940.0),
        (122, 10, 9, 2750.0),
        (123, 10, 15, 600.0),
        (124, 10, 16, 1750.0),
        (125, 10, 17, 900.0),
        (126, 10, 21, 2160.0),
        (127, 10, 25, 240.0),
        (128, 10, 26, 680.0),
        (129, 10, 30, 1200.0),
        (130, 10, 37, 1640.0),
        (131, 11, 1, 2270.0),
        (132, 11, 2, 2350.0),
        (133, 11, 3, 1200.0),
        (134, 11, 5, 2970.0),
        (135, 11, 9, 2530.0),
        (136, 11, 15, 1130.0),
        (137, 11, 16, 460.0),
        (138, 11, 17, 2590.0),
        (139, 11, 21, 2940.0),
        (140, 11, 25, 2910.0),
        (141, 11, 26, 860.0),
        (142, 11, 30, 950.0),
        (143, 11, 37, 290.0),
        (144, 12, 1, 2810.0),
        (145, 12, 2, 210.0),
        (146, 12, 3, 1560.0),
        (147, 12, 5, 720.0),
        (148, 12, 9, 2100.0),
        (149, 12, 15, 790.0),
        (150, 12, 16, 2730.0),
        (151, 12, 17, 2330.0),
        (152, 12, 21, 450.0),
        (153, 12, 25, 780.0),
        (154, 12, 26, 1460.0),
        (155, 12, 30, 1200.0),
        (156, 12, 37, 950.0),
        (157, 13, 1, 640.0),
        (158, 13, 2, 790.0),
        (159, 13, 3, 2860.0),
        (160, 13, 5, 1780.0),
        (161, 13, 9, 3130.0),
        (162, 13, 15, 250.0),
        (163, 13, 16, 540.0),
        (164, 13, 17, 430.0),
        (165, 13, 21, 2330.0),
        (166, 13, 25, 3080.0),
        (167, 13, 26, 2710.0),
        (168, 13, 30, 690.0),
        (169, 13, 37, 2890.0),
        (170, 14, 1, 450.0),
        (171, 14, 2, 450.0),
        (172, 14, 3, 340.0),
        (173, 14, 5, 1740.0),
        (174, 14, 9, 2180.0),
        (175, 14, 15, 1760.0),
        (176, 14, 16, 790.0),
        (177, 14, 17, 950.0),
        (178, 14, 21, 730.0),
        (179, 14, 25, 1050.0),
        (180, 14, 26, 1850.0),
        (181, 14, 30, 2630.0),
        (182, 14, 37, 2090.0),
        (183, 15, 1, 380.0),
        (184, 15, 2, 810.0),
        (185, 15, 3, 1740.0),
        (186, 15, 5, 1980.0),
        (187, 15, 9, 290.0),
        (188, 15, 15, 1450.0),
        (189, 15, 16, 810.0),
        (190, 15, 17, 430.0),
        (191, 15, 21, 440.0),
        (192, 15, 25, 460.0),
        (193, 15, 26, 950.0),
        (194, 15, 30, 990.0),
        (195, 15, 37, 280.0),
        (196, 16, 1, 460.0),
        (197, 16, 2, 1270.0),
        (198, 16, 3, 1220.0),
        (199, 16, 5, 2380.0),
        (200, 16, 9, 1050.0),
        (201, 16, 15, 2410.0),
        (202, 16, 16, 630.0),
        (203, 16, 17, 1310.0),
        (204, 16, 21, 1460.0),
        (205, 16, 25, 1200.0),
        (206, 16, 26, 2310.0),
        (207, 16, 30, 2090.0),
        (208, 16, 37, 1620.0),
        (209, 17, 1, 560.0),
        (210, 17, 2, 540.0),
        (211, 17, 3, 1290.0),
        (212, 17, 5, 860.0),
        (213, 17, 9, 1330.0),
        (214, 17, 15, 340.0),
        (215, 17, 16, 1120.0),
        (216, 17, 17, 1510.0),
        (217, 17, 21, 200.0),
        (218, 17, 25, 1440.0),
        (219, 17, 26, 3020.0),
        (220, 17, 30, 1630.0),
        (221, 17, 37, 260.0),
        (222, 18, 1, 1160.0),
        (223, 18, 2, 870.0),
        (224, 18, 3, 1400.0),
        (225, 18, 5, 2110.0),
        (226, 18, 9, 2060.0),
        (227, 18, 15, 860.0),
        (228, 18, 16, 2060.0),
        (229, 18, 17, 2040.0),
        (230, 18, 21, 3100.0),
        (231, 18, 25, 1550.0),
        (232, 18, 26, 1340.0),
        (233, 18, 30, 1120.0),
        (234, 18, 37, 2120.0),
        (235, 19, 1, 1900.0),
        (236, 19, 2, 300.0),
        (237, 19, 3, 1970.0),
        (238, 19, 5, 2470.0),
        (239, 19, 9, 1450.0),
        (240, 19, 15, 3000.0),
        (241, 19, 16, 710.0),
        (242, 19, 17, 1390.0),
        (243, 19, 21, 2540.0),
        (244, 19, 25, 2700.0),
        (245, 19, 26, 360.0),
        (246, 19, 30, 1300.0),
        (247, 19, 37, 710.0),
        (248, 20, 1, 1720.0),
        (249, 20, 2, 1330.0),
        (250, 20, 3, 2700.0),
        (251, 20, 5, 830.0),
        (252, 20, 9, 440.0),
        (253, 20, 15, 2220.0),
        (254, 20, 16, 3040.0),
        (255, 20, 17, 1250.0),
        (256, 20, 21, 1590.0),
        (257, 20, 25, 1670.0),
        (258, 20, 26, 1710.0),
        (259, 20, 30, 720.0),
        (260, 20, 37, 710.0),
        (261, 21, 1, 1190.0),
        (262, 21, 2, 2860.0),
        (263, 21, 3, 770.0),
        (264, 21, 5, 2440.0),
        (265, 21, 9, 370.0),
        (266, 21, 15, 3170.0),
        (267, 21, 16, 2400.0),
        (268, 21, 17, 2440.0),
        (269, 21, 21, 870.0),
        (270, 21, 25, 2920.0),
        (271, 21, 26, 870.0),
        (272, 21, 30, 2080.0),
        (273, 21, 37, 2630.0),
        (274, 22, 1, 980.0),
        (275, 22, 2, 2670.0),
        (276, 22, 3, 490.0),
        (277, 22, 5, 2690.0),
        (278, 22, 9, 1940.0),
        (279, 22, 15, 2340.0),
        (280, 22, 16, 550.0),
        (281, 22, 17, 1880.0),
        (282, 22, 21, 1060.0),
        (283, 22, 25, 1610.0),
        (284, 22, 26, 1910.0),
        (285, 22, 30, 1450.0),
        (286, 22, 37, 1870.0),
        (287, 23, 1, 1150.0),
        (288, 23, 2, 1350.0),
        (289, 23, 3, 1310.0),
        (290, 23, 5, 2220.0),
        (291, 23, 9, 2870.0),
        (292, 23, 15, 310.0),
        (293, 23, 16, 520.0),
        (294, 23, 17, 2680.0),
        (295, 23, 21, 210.0),
        (296, 23, 25, 2980.0),
        (297, 23, 26, 1820.0),
        (298, 23, 30, 2800.0),
        (299, 23, 37, 1580.0),
        (300, 24, 1, 2000.0),
        (301, 24, 2, 1950.0),
        (302, 24, 3, 1260.0),
        (303, 24, 5, 420.0),
        (304, 24, 9, 920.0),
        (305, 24, 15, 2880.0),
        (306, 24, 16, 1220.0),
        (307, 24, 17, 750.0),
        (308, 24, 21, 1140.0),
        (309, 24, 25, 850.0),
        (310, 24, 26, 1660.0),
        (311, 24, 30, 1810.0),
        (312, 24, 37, 260.0),
        (313, 25, 1, 1920.0),
        (314, 25, 2, 2020.0),
        (315, 25, 3, 840.0),
        (316, 25, 5, 780.0),
        (317, 25, 9, 530.0),
        (318, 25, 15, 620.0),
        (319, 25, 16, 2570.0),
        (320, 25, 17, 1720.0),
        (321, 25, 21, 1190.0),
        (322, 25, 25, 560.0),
        (323, 25, 26, 2380.0),
        (324, 25, 30, 2960.0),
        (325, 25, 37, 1560.0),
        (326, 26, 1, 630.0),
        (327, 26, 2, 2250.0),
        (328, 26, 3, 2180.0),
        (329, 26, 5, 930.0),
        (330, 26, 9, 910.0),
        (331, 26, 15, 200.0),
        (332, 26, 16, 2090.0),
        (333, 26, 17, 2200.0),
        (334, 26, 21, 450.0),
        (335, 26, 25, 1960.0),
        (336, 26, 26, 1610.0),
        (337, 26, 30, 1170.0),
        (338, 26, 37, 2650.0),
        (339, 27, 1, 1030.0),
        (340, 27, 2, 1420.0),
        (341, 27, 3, 580.0),
        (342, 27, 5, 1620.0),
        (343, 27, 9, 700.0),
        (344, 27, 15, 2200.0),
        (345, 27, 16, 590.0),
        (346, 27, 17, 1620.0),
        (347, 27, 21, 3100.0),
        (348, 27, 25, 470.0),
        (349, 27, 26, 2720.0),
        (350, 27, 30, 1440.0),
        (351, 27, 37, 330.0),
        (352, 28, 1, 3110.0),
        (353, 28, 2, 610.0),
        (354, 28, 3, 2540.0),
        (355, 28, 5, 790.0),
        (356, 28, 9, 720.0),
        (357, 28, 15, 590.0),
        (358, 28, 16, 400.0),
        (359, 28, 17, 300.0),
        (360, 28, 21, 730.0),
        (361, 28, 25, 370.0),
        (362, 28, 26, 3000.0),
        (363, 28, 30, 680.0),
        (364, 28, 37, 840.0),
        (365, 29, 1, 2280.0),
        (366, 29, 2, 2090.0),
        (367, 29, 3, 3100.0),
        (368, 29, 5, 1360.0),
        (369, 29, 9, 2350.0),
        (370, 29, 15, 400.0),
        (371, 29, 16, 1380.0),
        (372, 29, 17, 280.0),
        (373, 29, 21, 340.0),
        (374, 29, 25, 2270.0),
        (375, 29, 26, 520.0),
        (376, 29, 30, 380.0),
        (377, 29, 37, 720.0),
        (378, 30, 1, 1010.0),
        (379, 30, 2, 1280.0),
        (380, 30, 3, 2370.0),
        (381, 30, 5, 1940.0),
        (382, 30, 9, 1390.0),
        (383, 30, 15, 590.0),
        (384, 30, 16, 290.0),
        (385, 30, 17, 1340.0),
        (386, 30, 21, 2940.0),
        (387, 30, 25, 960.0),
        (388, 30, 26, 2290.0),
        (389, 30, 30, 440.0),
        (390, 30, 37, 980.0),
        (391, 31, 1, 1870.0),
        (392, 31, 2, 910.0),
        (393, 31, 3, 540.0),
        (394, 31, 5, 800.0),
        (395, 31, 9, 750.0),
        (396, 31, 15, 460.0),
        (397, 31, 16, 2470.0),
        (398, 31, 17, 2850.0),
        (399, 31, 21, 340.0),
        (400, 31, 25, 2220.0),
        (401, 31, 26, 2590.0),
        (402, 31, 30, 900.0),
        (403, 31, 37, 370.0),
        (404, 32, 1, 2970.0),
        (405, 32, 2, 350.0),
        (406, 32, 3, 2020.0),
        (407, 32, 5, 1300.0),
        (408, 32, 9, 2610.0),
        (409, 32, 15, 2110.0),
        (410, 32, 16, 3050.0),
        (411, 32, 17, 410.0),
        (412, 32, 21, 340.0),
        (413, 32, 25, 230.0),
        (414, 32, 26, 2490.0),
        (415, 32, 30, 440.0),
        (416, 32, 37, 780.0),
        (417, 33, 1, 1720.0),
        (418, 33, 2, 1240.0),
        (419, 33, 3, 1630.0),
        (420, 33, 5, 1110.0),
        (421, 33, 9, 1330.0),
        (422, 33, 15, 250.0),
        (423, 33, 16, 2250.0),
        (424, 33, 17, 290.0),
        (425, 33, 21, 1180.0),
        (426, 33, 25, 1530.0),
        (427, 33, 26, 750.0),
        (428, 33, 30, 2740.0),
        (429, 33, 37, 1890.0),
        (430, 34, 1, 2300.0),
        (431, 34, 2, 1230.0),
        (432, 34, 3, 2740.0),
        (433, 34, 5, 2400.0),
        (434, 34, 9, 910.0),
        (435, 34, 15, 1440.0),
        (436, 34, 16, 2020.0),
        (437, 34, 17, 2530.0),
        (438, 34, 21, 1470.0),
        (439, 34, 25, 2120.0),
        (440, 34, 26, 770.0),
        (441, 34, 30, 210.0),
        (442, 34, 37, 2260.0),
        (443, 35, 1, 1210.0),
        (444, 35, 2, 570.0),
        (445, 35, 3, 2640.0),
        (446, 35, 5, 320.0),
        (447, 35, 9, 2410.0),
        (448, 35, 15, 1750.0),
        (449, 35, 16, 1900.0),
        (450, 35, 17, 2140.0),
        (451, 35, 21, 2360.0),
        (452, 35, 25, 2180.0),
        (453, 35, 26, 1430.0),
        (454, 35, 30, 2210.0),
        (455, 35, 37, 820.0),
        (456, 36, 1, 1790.0),
        (457, 36, 2, 1630.0),
        (458, 36, 3, 1990.0),
        (459, 36, 5, 2180.0),
        (460, 36, 9, 250.0),
        (461, 36, 15, 2210.0),
        (462, 36, 16, 2230.0),
        (463, 36, 17, 2390.0),
        (464, 36, 21, 1930.0),
        (465, 36, 25, 870.0),
        (466, 36, 26, 1310.0),
        (467, 36, 30, 2850.0),
        (468, 36, 37, 2360.0),
        (469, 37, 1, 2000.0),
        (470, 37, 2, 1040.0),
        (471, 37, 3, 2570.0),
        (472, 37, 5, 1310.0),
        (473, 37, 9, 470.0),
        (474, 37, 15, 1160.0),
        (475, 37, 16, 2140.0),
        (476, 37, 17, 1350.0),
        (477, 37, 21, 680.0),
        (478, 37, 25, 880.0),
        (479, 37, 26, 1850.0),
        (480, 37, 30, 340.0),
        (481, 37, 37, 770.0),
        (482, 38, 1, 1110.0),
        (483, 38, 2, 1410.0),
        (484, 38, 3, 1760.0),
        (485, 38, 5, 1430.0),
        (486, 38, 9, 620.0),
        (487, 38, 15, 2990.0),
        (488, 38, 16, 1620.0),
        (489, 38, 17, 2330.0),
        (490, 38, 21, 300.0),
        (491, 38, 25, 1130.0),
        (492, 38, 26, 2230.0),
        (493, 38, 30, 1240.0),
        (494, 38, 37, 290.0),
        (495, 39, 1, 1350.0),
        (496, 39, 2, 2540.0),
        (497, 39, 3, 670.0),
        (498, 39, 5, 3030.0),
        (499, 39, 9, 2660.0),
        (500, 39, 15, 2470.0),
        (501, 39, 16, 2160.0),
        (502, 39, 17, 1850.0),
        (503, 39, 21, 180.0),
        (504, 39, 25, 2830.0),
        (505, 39, 26, 2320.0),
        (506, 39, 30, 680.0),
        (507, 39, 37, 1530.0),
        (508, 40, 1, 1850.0),
        (509, 40, 2, 610.0),
        (510, 40, 3, 260.0),
        (511, 40, 5, 830.0),
        (512, 40, 9, 230.0),
        (513, 40, 15, 2370.0),
        (514, 40, 16, 1580.0),
        (515, 40, 17, 640.0),
        (516, 40, 21, 1210.0),
        (517, 40, 25, 2420.0),
        (518, 40, 26, 490.0),
        (519, 40, 30, 2400.0),
        (520, 40, 37, 670.0),
        (521, 41, 1, 1870.0),
        (522, 41, 2, 2010.0),
        (523, 41, 3, 1980.0),
        (524, 41, 5, 890.0),
        (525, 41, 9, 190.0),
        (526, 41, 15, 1180.0),
        (527, 41, 16, 870.0),
        (528, 41, 17, 770.0),
        (529, 41, 21, 1030.0),
        (530, 41, 25, 590.0),
        (531, 41, 26, 2280.0),
        (532, 41, 30, 590.0),
        (533, 41, 37, 670.0),
        (534, 42, 1, 1810.0),
        (535, 42, 2, 2040.0),
        (536, 42, 3, 2190.0),
        (537, 42, 5, 1880.0),
        (538, 42, 9, 2210.0),
        (539, 42, 15, 1560.0),
        (540, 42, 16, 1270.0),
        (541, 42, 17, 1660.0),
        (542, 42, 21, 320.0),
        (543, 42, 25, 2430.0),
        (544, 42, 26, 1780.0),
        (545, 42, 30, 470.0),
        (546, 42, 37, 1760.0),
        (547, 43, 1, 990.0),
        (548, 43, 2, 850.0),
        (549, 43, 3, 870.0),
        (550, 43, 5, 210.0),
        (551, 43, 9, 1260.0),
        (552, 43, 15, 2520.0),
        (553, 43, 16, 1480.0),
        (554, 43, 17, 650.0),
        (555, 43, 21, 2780.0),
        (556, 43, 25, 730.0),
        (557, 43, 26, 1260.0),
        (558, 43, 30, 860.0),
        (559, 43, 37, 650.0),
        (560, 44, 1, 2350.0),
        (561, 44, 2, 2200.0),
        (562, 44, 3, 2740.0),
        (563, 44, 5, 2910.0),
        (564, 44, 9, 670.0),
        (565, 44, 15, 1270.0),
        (566, 44, 16, 1070.0),
        (567, 44, 17, 1050.0),
        (568, 44, 21, 550.0),
        (569, 44, 25, 2050.0),
        (570, 44, 26, 1260.0),
        (571, 44, 30, 370.0),
        (572, 44, 37, 1430.0),
        (573, 45, 1, 1450.0),
        (574, 45, 2, 2960.0),
        (575, 45, 3, 1030.0),
        (576, 45, 5, 1160.0),
        (577, 45, 9, 670.0),
        (578, 45, 15, 2830.0),
        (579, 45, 16, 2530.0),
        (580, 45, 17, 1880.0),
        (581, 45, 21, 760.0),
        (582, 45, 25, 1520.0),
        (583, 45, 26, 610.0),
        (584, 45, 30, 990.0),
        (585, 45, 37, 2670.0),
        (586, 46, 1, 1370.0),
        (587, 46, 2, 2250.0),
        (588, 46, 3, 530.0),
        (589, 46, 5, 1200.0),
        (590, 46, 9, 790.0),
        (591, 46, 15, 1260.0),
        (592, 46, 16, 1480.0),
        (593, 46, 17, 950.0),
        (594, 46, 21, 810.0),
        (595, 46, 25, 2580.0),
        (596, 46, 26, 500.0),
        (597, 46, 30, 1490.0),
        (598, 46, 37, 1930.0),
        (599, 47, 1, 1310.0),
        (600, 47, 2, 750.0),
        (601, 47, 3, 1330.0),
        (602, 47, 5, 950.0),
        (603, 47, 9, 1200.0),
        (604, 47, 15, 2320.0),
        (605, 47, 16, 1100.0),
        (606, 47, 17, 200.0),
        (607, 47, 21, 2660.0),
        (608, 47, 25, 2590.0),
        (609, 47, 26, 1850.0),
        (610, 47, 30, 610.0),
        (611, 47, 37, 1410.0),
        (612, 48, 1, 2780.0),
        (613, 48, 2, 2320.0),
        (614, 48, 3, 800.0),
        (615, 48, 5, 1810.0),
        (616, 48, 9, 320.0),
        (617, 48, 15, 2900.0),
        (618, 48, 16, 2100.0),
        (619, 48, 17, 3050.0),
        (620, 48, 21, 2160.0),
        (621, 48, 25, 2280.0),
        (622, 48, 26, 1740.0),
        (623, 48, 30, 2440.0),
        (624, 48, 37, 1980.0),
        (625, 49, 1, 1230.0),
        (626, 49, 2, 890.0),
        (627, 49, 3, 360.0),
        (628, 49, 5, 610.0),
        (629, 49, 9, 430.0),
        (630, 49, 15, 550.0),
        (631, 49, 16, 1360.0),
        (632, 49, 17, 1210.0),
        (633, 49, 21, 2300.0),
        (634, 49, 25, 490.0),
        (635, 49, 26, 1590.0),
        (636, 49, 30, 1300.0),
        (637, 49, 37, 2210.0),
        (638, 50, 1, 1100.0),
        (639, 50, 2, 660.0),
        (640, 50, 3, 2800.0),
        (641, 50, 5, 780.0),
        (642, 50, 9, 2480.0),
        (643, 50, 15, 2930.0),
        (644, 50, 16, 1270.0),
        (645, 50, 17, 1850.0),
        (646, 50, 21, 1030.0),
        (647, 50, 25, 830.0),
        (648, 50, 26, 440.0),
        (649, 50, 30, 1430.0),
        (650, 50, 37, 1280.0),
        (651, 51, 1, 550.0),
        (652, 51, 2, 710.0),
        (653, 51, 3, 1260.0),
        (654, 51, 5, 2970.0),
        (655, 51, 9, 1320.0),
        (656, 51, 15, 970.0),
        (657, 51, 16, 2990.0),
        (658, 51, 17, 1890.0),
        (659, 51, 21, 1200.0),
        (660, 51, 25, 420.0),
        (661, 51, 26, 880.0),
        (662, 51, 30, 2090.0),
        (663, 51, 37, 900.0),
        (664, 52, 1, 2570.0),
        (665, 52, 2, 2050.0),
        (666, 52, 3, 2150.0),
        (667, 52, 5, 1360.0),
        (668, 52, 9, 1200.0),
        (669, 52, 15, 1030.0),
        (670, 52, 16, 760.0),
        (671, 52, 17, 480.0),
        (672, 52, 21, 1660.0),
        (673, 52, 25, 980.0),
        (674, 52, 26, 640.0),
        (675, 52, 30, 2330.0),
        (676, 52, 37, 2110.0),
        (677, 53, 1, 240.0),
        (678, 53, 2, 1710.0),
        (679, 53, 3, 710.0),
        (680, 53, 5, 2620.0),
        (681, 53, 9, 2080.0),
        (682, 53, 15, 1450.0),
        (683, 53, 16, 1590.0),
        (684, 53, 17, 980.0),
        (685, 53, 21, 1460.0),
        (686, 53, 25, 530.0),
        (687, 53, 26, 440.0),
        (688, 53, 30, 2040.0),
        (689, 53, 37, 2680.0),
        (690, 54, 1, 950.0),
        (691, 54, 2, 3010.0),
        (692, 54, 3, 3070.0),
        (693, 54, 5, 1460.0),
        (694, 54, 9, 1900.0),
        (695, 54, 15, 290.0),
        (696, 54, 16, 3100.0),
        (697, 54, 17, 2220.0),
        (698, 54, 21, 1180.0),
        (699, 54, 25, 1710.0),
        (700, 54, 26, 1930.0),
        (701, 54, 30, 1780.0),
        (702, 54, 37, 1660.0),
        (703, 55, 1, 2440.0),
        (704, 55, 2, 2790.0),
        (705, 55, 3, 1700.0),
        (706, 55, 5, 680.0),
        (707, 55, 9, 2030.0),
        (708, 55, 15, 210.0),
        (709, 55, 16, 1200.0),
        (710, 55, 17, 200.0),
        (711, 55, 21, 2810.0),
        (712, 55, 25, 2280.0),
        (713, 55, 26, 1590.0),
        (714, 55, 30, 1080.0),
        (715, 55, 37, 2690.0),
        (716, 56, 1, 300.0),
        (717, 56, 2, 2810.0),
        (718, 56, 3, 630.0),
        (719, 56, 5, 290.0),
        (720, 56, 9, 210.0),
        (721, 56, 15, 860.0),
        (722, 56, 16, 1000.0),
        (723, 56, 17, 640.0),
        (724, 56, 21, 2590.0),
        (725, 56, 25, 2280.0),
        (726, 56, 26, 3000.0),
        (727, 56, 30, 1560.0),
        (728, 56, 37, 1210.0),
        (729, 57, 1, 670.0),
        (730, 57, 2, 1830.0),
        (731, 57, 3, 1030.0),
        (732, 57, 5, 860.0),
        (733, 57, 9, 1430.0),
        (734, 57, 15, 760.0),
        (735, 57, 16, 1020.0),
        (736, 57, 17, 1880.0),
        (737, 57, 21, 2320.0),
        (738, 57, 25, 1500.0),
        (739, 57, 26, 1580.0),
        (740, 57, 30, 2280.0),
        (741, 57, 37, 2950.0),
        (742, 58, 1, 1780.0),
        (743, 58, 2, 1790.0),
        (744, 58, 3, 2260.0),
        (745, 58, 5, 3050.0),
        (746, 58, 9, 2130.0),
        (747, 58, 15, 580.0),
        (748, 58, 16, 2130.0),
        (749, 58, 17, 1950.0),
        (750, 58, 21, 2630.0),
        (751, 58, 25, 2700.0),
        (752, 58, 26, 740.0),
        (753, 58, 30, 350.0),
        (754, 58, 37, 750.0),
        (755, 59, 1, 1380.0),
        (756, 59, 2, 1400.0),
        (757, 59, 3, 2720.0),
        (758, 59, 5, 1560.0),
        (759, 59, 9, 2310.0),
        (760, 59, 15, 2530.0),
        (761, 59, 16, 2340.0),
        (762, 59, 17, 820.0),
        (763, 59, 21, 1720.0),
        (764, 59, 25, 2430.0),
        (765, 59, 26, 1330.0),
        (766, 59, 30, 2570.0),
        (767, 59, 37, 2780.0),
        (768, 60, 1, 2220.0),
        (769, 60, 2, 2750.0),
        (770, 60, 3, 1300.0),
        (771, 60, 5, 2220.0),
        (772, 60, 9, 1690.0),
        (773, 60, 15, 1840.0),
        (774, 60, 16, 760.0),
        (775, 60, 17, 1100.0),
        (776, 60, 21, 2650.0),
        (777, 60, 25, 3150.0),
        (778, 60, 26, 2360.0),
        (779, 60, 30, 2790.0),
        (780, 60, 37, 1990.0),
        (781, 61, 1, 1340.0),
        (782, 61, 2, 1290.0),
        (783, 61, 3, 1950.0),
        (784, 61, 5, 1960.0),
        (785, 61, 9, 3010.0),
        (786, 61, 15, 1700.0),
        (787, 61, 16, 710.0),
        (788, 61, 17, 2660.0),
        (789, 61, 21, 2920.0),
        (790, 61, 25, 230.0),
        (791, 61, 26, 1310.0),
        (792, 61, 30, 1470.0),
        (793, 61, 37, 770.0),
        (794, 62, 1, 920.0),
        (795, 62, 2, 2510.0),
        (796, 62, 3, 1240.0),
        (797, 62, 5, 1240.0),
        (798, 62, 9, 450.0),
        (799, 62, 15, 2230.0),
        (800, 62, 16, 730.0),
        (801, 62, 17, 2740.0),
        (802, 62, 21, 890.0),
        (803, 62, 25, 1280.0),
        (804, 62, 26, 610.0),
        (805, 62, 30, 1620.0),
        (806, 62, 37, 1790.0),
        (807, 63, 1, 1740.0),
        (808, 63, 2, 390.0),
        (809, 63, 3, 2270.0),
        (810, 63, 5, 1320.0),
        (811, 63, 9, 2490.0),
        (812, 63, 15, 620.0),
        (813, 63, 16, 2340.0),
        (814, 63, 17, 2060.0),
        (815, 63, 21, 510.0),
        (816, 63, 25, 1210.0),
        (817, 63, 26, 910.0),
        (818, 63, 30, 2800.0),
        (819, 63, 37, 350.0),
        (820, 64, 1, 1060.0),
        (821, 64, 2, 960.0),
        (822, 64, 3, 1890.0),
        (823, 64, 5, 1580.0),
        (824, 64, 9, 1820.0),
        (825, 64, 15, 2400.0),
        (826, 64, 16, 430.0),
        (827, 64, 17, 2570.0),
        (828, 64, 21, 2990.0),
        (829, 64, 25, 950.0),
        (830, 64, 26, 450.0),
        (831, 64, 30, 1820.0),
        (832, 64, 37, 1610.0),
        (833, 65, 1, 2610.0),
        (834, 65, 2, 2810.0),
        (835, 65, 3, 1890.0),
        (836, 65, 5, 1480.0),
        (837, 65, 9, 510.0),
        (838, 65, 15, 1090.0),
        (839, 65, 16, 3100.0),
        (840, 65, 17, 1690.0),
        (841, 65, 21, 2120.0),
        (842, 65, 25, 3060.0),
        (843, 65, 26, 2920.0),
        (844, 65, 30, 2320.0),
        (845, 65, 37, 2080.0),
        (846, 66, 1, 2670.0),
        (847, 66, 2, 1450.0),
        (848, 66, 3, 2410.0),
        (849, 66, 5, 1130.0),
        (850, 66, 9, 2120.0),
        (851, 66, 15, 1350.0),
        (852, 66, 16, 2370.0),
        (853, 66, 17, 1070.0),
        (854, 66, 21, 2900.0),
        (855, 66, 25, 140.0),
        (856, 66, 26, 1780.0),
        (857, 66, 30, 2530.0),
        (858, 66, 37, 2120.0),
        (859, 67, 1, 870.0),
        (860, 67, 2, 800.0),
        (861, 67, 3, 2360.0),
        (862, 67, 5, 1620.0),
        (863, 67, 9, 1070.0),
        (864, 67, 15, 430.0),
        (865, 67, 16, 170.0),
        (866, 67, 17, 1320.0),
        (867, 67, 21, 2580.0),
        (868, 67, 25, 220.0),
        (869, 67, 26, 460.0),
        (870, 67, 30, 1090.0),
        (871, 67, 37, 2360.0),
        (872, 68, 1, 2720.0),
        (873, 68, 2, 2190.0),
        (874, 68, 3, 750.0),
        (875, 68, 5, 1530.0),
        (876, 68, 9, 1260.0),
        (877, 68, 15, 2600.0),
        (878, 68, 16, 950.0),
        (879, 68, 17, 2480.0),
        (880, 68, 21, 2400.0),
        (881, 68, 25, 2750.0),
        (882, 68, 26, 2200.0),
        (883, 68, 30, 1980.0),
        (884, 68, 37, 1800.0),
        (885, 69, 1, 1130.0),
        (886, 69, 2, 430.0),
        (887, 69, 3, 270.0),
        (888, 69, 5, 3030.0),
        (889, 69, 9, 270.0),
        (890, 69, 15, 2930.0),
        (891, 69, 16, 1240.0),
        (892, 69, 17, 460.0),
        (893, 69, 21, 1650.0),
        (894, 69, 25, 2660.0),
        (895, 69, 26, 1240.0),
        (896, 69, 30, 930.0),
        (897, 69, 37, 1400.0),
        (898, 70, 1, 3090.0),
        (899, 70, 2, 2370.0),
        (900, 70, 3, 2110.0),
        (901, 70, 5, 610.0),
        (902, 70, 9, 2500.0),
        (903, 70, 15, 900.0),
        (904, 70, 16, 1220.0),
        (905, 70, 17, 2120.0),
        (906, 70, 21, 2120.0),
        (907, 70, 25, 2700.0),
        (908, 70, 26, 1010.0),
        (909, 70, 30, 1590.0),
        (910, 70, 37, 1300.0),
        (911, 71, 1, 1560.0),
        (912, 71, 2, 1680.0),
        (913, 71, 3, 1460.0),
        (914, 71, 5, 2600.0),
        (915, 71, 9, 1710.0),
        (916, 71, 15, 1070.0),
        (917, 71, 16, 3060.0),
        (918, 71, 17, 3130.0),
        (919, 71, 21, 1260.0),
        (920, 71, 25, 550.0),
        (921, 71, 26, 2650.0),
        (922, 71, 30, 1580.0),
        (923, 71, 37, 2560.0),
        (924, 72, 1, 2500.0),
        (925, 72, 2, 2570.0),
        (926, 72, 3, 1100.0),
        (927, 72, 5, 730.0),
        (928, 72, 9, 260.0),
        (929, 72, 15, 2050.0),
        (930, 72, 16, 1340.0),
        (931, 72, 17, 2590.0),
        (932, 72, 21, 2380.0),
        (933, 72, 25, 2370.0),
        (934, 72, 26, 370.0),
        (935, 72, 30, 860.0),
        (936, 72, 37, 870.0),
        (937, 73, 1, 2100.0),
        (938, 73, 2, 3060.0),
        (939, 73, 3, 2490.0),
        (940, 73, 5, 2750.0),
        (941, 73, 9, 1860.0),
        (942, 73, 15, 1910.0),
        (943, 73, 16, 1410.0),
        (944, 73, 17, 370.0),
        (945, 73, 21, 2220.0),
        (946, 73, 25, 2870.0),
        (947, 73, 26, 1500.0),
        (948, 73, 30, 1430.0),
        (949, 73, 37, 330.0),
        (950, 74, 1, 1590.0),
        (951, 74, 2, 1810.0),
        (952, 74, 3, 1060.0),
        (953, 74, 5, 1860.0),
        (954, 74, 9, 2940.0),
        (955, 74, 15, 2540.0),
        (956, 74, 16, 3110.0),
        (957, 74, 17, 1780.0),
        (958, 74, 21, 2480.0),
        (959, 74, 25, 360.0),
        (960, 74, 26, 3060.0),
        (961, 74, 30, 1220.0),
        (962, 74, 37, 1240.0),
        (963, 75, 1, 3020.0),
        (964, 75, 2, 2620.0),
        (965, 75, 3, 2910.0),
        (966, 75, 5, 640.0),
        (967, 75, 9, 2570.0),
        (968, 75, 15, 960.0),
        (969, 75, 16, 380.0),
        (970, 75, 17, 2560.0),
        (971, 75, 21, 390.0),
        (972, 75, 25, 1800.0),
        (973, 75, 26, 270.0),
        (974, 75, 30, 1430.0),
        (975, 75, 37, 1400.0),
        (976, 76, 1, 780.0),
        (977, 76, 2, 2220.0),
        (978, 76, 3, 1370.0),
        (979, 76, 5, 1680.0),
        (980, 76, 9, 2760.0),
        (981, 76, 15, 2570.0),
        (982, 76, 16, 1290.0),
        (983, 76, 17, 660.0),
        (984, 76, 21, 2400.0),
        (985, 76, 25, 3020.0),
        (986, 76, 26, 820.0),
        (987, 76, 30, 2300.0),
        (988, 76, 37, 440.0),
        (989, 77, 1, 2440.0),
        (990, 77, 2, 2510.0),
        (991, 77, 3, 1990.0),
        (992, 77, 5, 2170.0),
        (993, 77, 9, 1920.0),
        (994, 77, 15, 2890.0),
        (995, 77, 16, 2320.0),
        (996, 77, 17, 1590.0),
        (997, 77, 21, 440.0),
        (998, 77, 25, 1380.0),
        (999, 77, 26, 2260.0),
        (1000, 77, 30, 2380.0),
        (1001, 77, 37, 3030.0),
        (1002, 78, 1, 2150.0),
        (1003, 78, 2, 960.0),
        (1004, 78, 3, 2640.0),
        (1005, 78, 5, 460.0),
        (1006, 78, 9, 380.0),
        (1007, 78, 15, 3050.0),
        (1008, 78, 16, 1800.0),
        (1009, 78, 17, 2080.0),
        (1010, 78, 21, 2240.0),
        (1011, 78, 25, 1140.0),
        (1012, 78, 26, 1720.0),
        (1013, 78, 30, 240.0),
        (1014, 78, 37, 3170.0),
        (1015, 79, 1, 2450.0),
        (1016, 79, 2, 2220.0),
        (1017, 79, 3, 220.0),
        (1018, 79, 5, 1470.0),
        (1019, 79, 9, 2800.0),
        (1020, 79, 15, 850.0),
        (1021, 79, 16, 1910.0),
        (1022, 79, 17, 1270.0),
        (1023, 79, 21, 2860.0),
        (1024, 79, 25, 1250.0),
        (1025, 79, 26, 980.0),
        (1026, 79, 30, 900.0),
        (1027, 79, 37, 2670.0),
        (1028, 80, 1, 2990.0),
        (1029, 80, 2, 310.0),
        (1030, 80, 3, 2510.0),
        (1031, 80, 5, 1020.0),
        (1032, 80, 9, 1280.0),
        (1033, 80, 15, 2510.0),
        (1034, 80, 16, 220.0),
        (1035, 80, 17, 380.0),
        (1036, 80, 21, 2980.0),
        (1037, 80, 25, 3030.0),
        (1038, 80, 26, 2340.0),
        (1039, 80, 30, 1710.0),
        (1040, 80, 37, 1790.0),
        (1041, 81, 1, 2700.0),
        (1042, 81, 2, 2190.0),
        (1043, 81, 3, 1770.0),
        (1044, 81, 5, 400.0),
        (1045, 81, 9, 750.0),
        (1046, 81, 15, 2640.0),
        (1047, 81, 16, 2800.0),
        (1048, 81, 17, 540.0),
        (1049, 81, 21, 1130.0),
        (1050, 81, 25, 260.0),
        (1051, 81, 26, 2510.0),
        (1052, 81, 30, 2190.0),
        (1053, 81, 37, 1080.0),
        (1054, 82, 1, 2330.0),
        (1055, 82, 2, 2350.0),
        (1056, 82, 3, 1020.0),
        (1057, 82, 5, 2330.0),
        (1058, 82, 9, 1120.0),
        (1059, 82, 15, 2370.0),
        (1060, 82, 16, 2260.0),
        (1061, 82, 17, 1760.0),
        (1062, 82, 21, 1480.0),
        (1063, 82, 25, 3060.0),
        (1064, 82, 26, 2580.0),
        (1065, 82, 30, 1160.0),
        (1066, 82, 37, 1130.0),
        (1067, 83, 1, 480.0),
        (1068, 83, 2, 2090.0),
        (1069, 83, 3, 3000.0),
        (1070, 83, 5, 880.0),
        (1071, 83, 9, 1830.0),
        (1072, 83, 15, 2780.0),
        (1073, 83, 16, 1190.0),
        (1074, 83, 17, 2130.0),
        (1075, 83, 21, 1210.0),
        (1076, 83, 25, 630.0),
        (1077, 83, 26, 1930.0),
        (1078, 83, 30, 1680.0),
        (1079, 83, 37, 960.0),
        (1080, 84, 1, 2630.0),
        (1081, 84, 2, 350.0),
        (1082, 84, 3, 2170.0),
        (1083, 84, 5, 1940.0),
        (1084, 84, 9, 2290.0),
        (1085, 84, 15, 550.0),
        (1086, 84, 16, 1550.0),
        (1087, 84, 17, 1710.0),
        (1088, 84, 21, 1780.0),
        (1089, 84, 25, 360.0),
        (1090, 84, 26, 2770.0),
        (1091, 84, 30, 2950.0),
        (1092, 84, 37, 420.0),
        (1093, 85, 1, 250.0),
        (1094, 85, 2, 1980.0),
        (1095, 85, 3, 2200.0),
        (1096, 85, 5, 2560.0),
        (1097, 85, 9, 1070.0),
        (1098, 85, 15, 1030.0),
        (1099, 85, 16, 2910.0),
        (1100, 85, 17, 1270.0),
        (1101, 85, 21, 620.0),
        (1102, 85, 25, 2870.0),
        (1103, 85, 26, 2700.0),
        (1104, 85, 30, 2710.0),
        (1105, 85, 37, 2240.0),
        (1106, 86, 1, 1310.0),
        (1107, 86, 2, 940.0),
        (1108, 86, 3, 750.0),
        (1109, 86, 5, 1730.0),
        (1110, 86, 9, 1410.0),
        (1111, 86, 15, 1530.0),
        (1112, 86, 16, 580.0),
        (1113, 86, 17, 1700.0),
        (1114, 86, 21, 1810.0),
        (1115, 86, 25, 2690.0),
        (1116, 86, 26, 2370.0),
        (1117, 86, 30, 940.0),
        (1118, 86, 37, 790.0),
        (1119, 87, 1, 1240.0),
        (1120, 87, 2, 2010.0),
        (1121, 87, 3, 1780.0),
        (1122, 87, 5, 2790.0),
        (1123, 87, 9, 600.0),
        (1124, 87, 15, 1050.0),
        (1125, 87, 16, 1470.0),
        (1126, 87, 17, 1970.0),
        (1127, 87, 21, 2930.0),
        (1128, 87, 25, 2140.0),
        (1129, 87, 26, 2580.0),
        (1130, 87, 30, 2730.0),
        (1131, 87, 37, 3050.0),
        (1132, 88, 1, 1710.0),
        (1133, 88, 2, 1950.0),
        (1134, 88, 3, 2690.0),
        (1135, 88, 5, 1350.0),
        (1136, 88, 9, 400.0),
        (1137, 88, 15, 680.0),
        (1138, 88, 16, 2770.0),
        (1139, 88, 17, 2590.0),
        (1140, 88, 21, 370.0),
        (1141, 88, 25, 1470.0),
        (1142, 88, 26, 170.0),
        (1143, 88, 30, 1250.0),
        (1144, 88, 37, 2650.0),
        (1145, 89, 1, 2270.0),
        (1146, 89, 2, 300.0),
        (1147, 89, 3, 1380.0),
        (1148, 89, 5, 2090.0),
        (1149, 89, 9, 2650.0),
        (1150, 89, 15, 2510.0),
        (1151, 89, 16, 1120.0),
        (1152, 89, 17, 1650.0),
        (1153, 89, 21, 880.0),
        (1154, 89, 25, 1280.0),
        (1155, 89, 26, 2070.0),
        (1156, 89, 30, 570.0),
        (1157, 89, 37, 400.0),
        (1158, 90, 1, 1100.0),
        (1159, 90, 2, 2240.0),
        (1160, 90, 3, 750.0),
        (1161, 90, 5, 2300.0),
        (1162, 90, 9, 510.0),
        (1163, 90, 15, 1960.0),
        (1164, 90, 16, 430.0),
        (1165, 90, 17, 3020.0),
        (1166, 90, 21, 2710.0),
        (1167, 90, 25, 1130.0),
        (1168, 90, 26, 2230.0),
        (1169, 90, 30, 1960.0),
        (1170, 90, 37, 1100.0),
        (1171, 91, 1, 190.0),
        (1172, 91, 2, 2410.0),
        (1173, 91, 3, 1020.0),
        (1174, 91, 5, 1980.0),
        (1175, 91, 9, 1060.0),
        (1176, 91, 15, 3050.0),
        (1177, 91, 16, 950.0),
        (1178, 91, 17, 1530.0),
        (1179, 91, 21, 2000.0),
        (1180, 91, 25, 1620.0),
        (1181, 91, 26, 1940.0),
        (1182, 91, 30, 2100.0),
        (1183, 91, 37, 2170.0),
        (1184, 92, 1, 1720.0),
        (1185, 92, 2, 780.0),
        (1186, 92, 3, 1310.0),
        (1187, 92, 5, 1810.0),
        (1188, 92, 9, 1110.0),
        (1189, 92, 15, 800.0),
        (1190, 92, 16, 2550.0),
        (1191, 92, 17, 2700.0),
        (1192, 92, 21, 2750.0),
        (1193, 92, 25, 2660.0),
        (1194, 92, 26, 2180.0),
        (1195, 92, 30, 690.0),
        (1196, 92, 37, 960.0),
        (1197, 93, 1, 200.0),
        (1198, 93, 2, 1880.0),
        (1199, 93, 3, 1860.0),
        (1200, 93, 5, 2290.0),
        (1201, 93, 9, 980.0),
        (1202, 93, 15, 500.0),
        (1203, 93, 16, 2220.0),
        (1204, 93, 17, 750.0),
        (1205, 93, 21, 2970.0),
        (1206, 93, 25, 2330.0),
        (1207, 93, 26, 350.0),
        (1208, 93, 30, 1470.0),
        (1209, 93, 37, 2250.0),
        (1210, 94, 1, 750.0),
        (1211, 94, 2, 2830.0),
        (1212, 94, 3, 940.0),
        (1213, 94, 5, 2410.0),
        (1214, 94, 9, 1140.0),
        (1215, 94, 15, 2240.0),
        (1216, 94, 16, 270.0),
        (1217, 94, 17, 1500.0),
        (1218, 94, 21, 220.0),
        (1219, 94, 25, 1960.0),
        (1220, 94, 26, 1990.0),
        (1221, 94, 30, 1520.0),
        (1222, 94, 37, 2700.0),
        (1223, 95, 1, 2630.0),
        (1224, 95, 2, 2880.0),
        (1225, 95, 3, 1230.0),
        (1226, 95, 5, 2380.0),
        (1227, 95, 9, 2810.0),
        (1228, 95, 15, 2500.0),
        (1229, 95, 16, 1680.0),
        (1230, 95, 17, 2510.0),
        (1231, 95, 21, 2770.0),
        (1232, 95, 25, 2570.0),
        (1233, 95, 26, 560.0),
        (1234, 95, 30, 2150.0),
        (1235, 95, 37, 1630.0),
        (1236, 96, 1, 2850.0),
        (1237, 96, 2, 1940.0),
        (1238, 96, 3, 1410.0),
        (1239, 96, 5, 370.0),
        (1240, 96, 9, 940.0),
        (1241, 96, 15, 1640.0),
        (1242, 96, 16, 1360.0),
        (1243, 96, 17, 2590.0),
        (1244, 96, 21, 740.0),
        (1245, 96, 25, 3020.0),
        (1246, 96, 26, 2380.0),
        (1247, 96, 30, 3060.0),
        (1248, 96, 37, 1090.0),
        (1249, 97, 1, 2850.0),
        (1250, 97, 2, 2450.0),
        (1251, 97, 3, 1300.0),
        (1252, 97, 5, 770.0),
        (1253, 97, 9, 1540.0),
        (1254, 97, 15, 1150.0),
        (1255, 97, 16, 1330.0),
        (1256, 97, 17, 240.0),
        (1257, 97, 21, 600.0),
        (1258, 97, 25, 860.0),
        (1259, 97, 26, 1350.0),
        (1260, 97, 30, 1670.0),
        (1261, 97, 37, 1290.0),
        (1262, 98, 1, 1920.0),
        (1263, 98, 2, 1480.0),
        (1264, 98, 3, 2300.0),
        (1265, 98, 5, 970.0),
        (1266, 98, 9, 2780.0),
        (1267, 98, 15, 610.0),
        (1268, 98, 16, 530.0),
        (1269, 98, 17, 2000.0),
        (1270, 98, 21, 450.0),
        (1271, 98, 25, 1640.0),
        (1272, 98, 26, 360.0),
        (1273, 98, 30, 2790.0),
        (1274, 98, 37, 2340.0),
        (1275, 99, 1, 2920.0),
        (1276, 99, 2, 900.0),
        (1277, 99, 3, 430.0),
        (1278, 99, 5, 2370.0),
        (1279, 99, 9, 2750.0),
        (1280, 99, 15, 1200.0),
        (1281, 99, 16, 2090.0),
        (1282, 99, 17, 2060.0),
        (1283, 99, 21, 650.0),
        (1284, 99, 25, 2140.0),
        (1285, 99, 26, 940.0),
        (1286, 99, 30, 1980.0),
        (1287, 99, 37, 1780.0),
        (1288, 100, 1, 530.0),
        (1289, 100, 2, 1580.0),
        (1290, 100, 3, 1950.0),
        (1291, 100, 5, 2060.0),
        (1292, 100, 9, 2620.0),
        (1293, 100, 15, 350.0),
        (1294, 100, 16, 1020.0),
        (1295, 100, 17, 550.0),
        (1296, 100, 21, 2610.0),
        (1297, 100, 25, 440.0),
        (1298, 100, 26, 2880.0),
        (1299, 100, 30, 2000.0),
        (1300, 100, 37, 420.0),
        (1301, 101, 1, 670.0),
        (1302, 102, 2, 2100.0),
        (1303, 103, 3, 1620.0),
        (1304, 104, 5, 1960.0),
        (1305, 105, 9, 2030.0),
        (1306, 106, 15, 1670.0),
        (1307, 107, 16, 2840.0),
        (1308, 108, 17, 1100.0),
        (1309, 109, 21, 1610.0),
        (1310, 110, 25, 650.0);
      """);
    await database.rawInsert("""INSERT INTO nasabah (id, nama, description) VALUES
        (1, 'Ayu', 'CSJ 1'),
        (2, 'Dinda', 'CSJ 2'),
        (3, 'Wulan', 'CSJ 6'),
        (4, 'Santi', 'CSJ 9'),
        (5, 'Dewi', 'CSJ 13'),
        (6, 'Wardhani', 'CSJ 17'),
        (7, 'Susan', 'CSJ 24'),
        (8, 'Yanti', 'CSJ 25'),
        (9, 'Ningsih', 'CSJ 26'),
        (10, 'Nabila', 'CSJ 27');
      """);
    await database.rawInsert("""INSERT INTO daftarkategori (id, kategori) VALUES
        (1, 'Metal'),
        (2, 'Plastik'),
        (3, 'Kertas'),
        (4, 'Beling/Kaca'),
        (5, 'Akrilik'),
        (6, 'Fiber'),
        (7, 'Styrofoam'),
        (8, 'Jelantah'),
        (9, 'Sepatu'),
        (10, 'Aki'),
        (11, 'Karpet'),
        (12, 'Impact');
      """);
    await database.rawInsert("""INSERT INTO daftarsubkategori (id, idkategori, subkategori, satuan, hargapersatuan) VALUES
        (1, 1, 'Besi', 'gram', 0),
        (2, 1, 'Tembaga', 'gram', 11),
        (3, 1, 'Aluminium', 'gram', 0),
        (4, 1, 'Babet/Kran', 'gram', 0),
        (5, 1, 'Kaleng', 'gram', 2),
        (6, 1, 'Seng/Kawat', 'gram', 1),
        (7, 2, 'PE (Plastik Putih)', 'gram', 0),
        (8, 2, 'PVC (Paralon)', 'gram', 0),
        (9, 2, 'Asoy (Plastik Bekas)', 'gram', 0.25),
        (10, 2, 'Botol Putih (Bodong Bersih)', 'gram', 3.5),
        (11, 2, 'Botol Warna (Bodong Warna)', 'gram', 0.9),
        (12, 2, 'Gelas Mineral (Bersih)', 'gram', 0),
        (13, 2, 'Gelas Mineral (Kotor)', 'gram', 0),
        (14, 2, 'Gelas Mineral (Warna)', 'gram', 0),
        (15, 2, 'Tutup Botol', 'gram', 2.5),
        (16, 2, 'Tutup Galon', 'gram', 4),
        (17, 2, 'Emberan', 'gram', 1.5),
        (18, 2, 'Kabin', 'gram', 0),
        (19, 2, 'Botol Kotor', 'gram', 0),
        (20, 2, 'Ember Hitam/Pot', 'gram', 0),
        (21, 3, 'Putihan/HVS', 'gram', 1.6),
        (22, 3, 'Majalah', 'gram', 0),
        (23, 3, 'Buku Kotor', 'gram', 1.2),
        (24, 3, 'Koran', 'gram', 0),
        (25, 3, 'Karton/Boncos', 'gram', 0.4),
        (26, 3, 'Kardus', 'gram', 1.2),
        (27, 3, 'Duplek', 'gram', 0),
        (28, 3, 'Karung Semen', 'gram', 0),
        (29, 3, 'Kertas Buram', 'gram', 0),
        (30, 4, 'Botol/Beling', 'gram', 0.25),
        (31, 4, 'Beling Pecah', 'gram', 0),
        (32, 5, 'Kristal', 'gram', 3),
        (33, 5, 'Keping CD/DVD', 'gram', 0),
        (34, 5, 'Toples Tipis', 'gram', 0),
        (35, 6, 'Galon LeMinerale', 'Buah', 2.8),
        (36, 7, 'Styrofoam', 'Buah', 0),
        (37, 8, 'Jelantah', 'gram', 5.5),
        (38, 9, 'Sepatu', 'gram', 0),
        (39, 10, 'Aki Mobil', 'gram', 0),
        (40, 11, 'Karpet', 'gram', 0),
        (41, 12, 'Impact', 'gram', 0);
      """);
  }
// id: the id of a item
// nama, description: name and description of your activity
// created_at: the time that the item was created. It will be automatically handled by SQLite

  static Future<sql.Database> db() async {
    return sql.openDatabase(
      'bank.db',
      version: 1,
      onCreate: (sql.Database database, int version) async {
        await createTables(database);
      },
    );
  }


  // // Create new item (journal)
  // static Future<int> createItem(String nama, String? descrption) async {
  //   final db = await SQLHelper.db();
  //
  //   final data = {'nama': nama, 'description': descrption};
  //   final id = await db.insert('nasabah', data,
  //       conflictAlgorithm: sql.ConflictAlgorithm.replace);
  //   return id;
  // }


  // Read all nasabah (journals)
  static Future<List<Map<String, dynamic>>> getItems() async {
    final db = await SQLHelper.db();
    return db.query('nasabah', orderBy: "id");
  }

  // Ambil kategori
  static Future<List<Map<String, dynamic>>> getKategori() async {
    final db = await SQLHelper.db();
    return db.query('daftarkategori', orderBy: "id");
  }

  // Ambil identitas, pengaturan dkk
  static Future<List<Map<String, dynamic>>> getPengaturan() async {
    final db = await SQLHelper.db();
    return db.query('pengaturan', orderBy: "id");
  }

  static Future<List<Map<String, dynamic>>> getSubKategori() async {
    final db = await SQLHelper.db();
    return db.query('daftarsubkategori', orderBy: "id");
  }

  static Future<List<Map<String, dynamic>>> getJumlah() async {
    final db = await SQLHelper.db();
    return db.query('setoran', orderBy: "id");
  }

  static Future<List<Map<String, dynamic>>> getSetoran() async {
    final db = await SQLHelper.db();
    return db.query('setoran', orderBy: "id");
  }

  static Future<List<Map<String, dynamic>>> getNasabah() async {
    final db = await SQLHelper.db();
    return db.query('nasabah', orderBy: "id");
  }

  // Ambil nama di daftar setoran
  static Future<List<Map<String, dynamic>>> getTglSetor() async {
    final db = await SQLHelper.db();
    return db.query('tglsetor', orderBy: "createdAt");
  }

  // Ambil setoran utk print pdf dari pegawai
  static Future<List<List<dynamic>>> getSetoranBuatPDF(int idtglsetor) async {
    final db = await SQLHelper.db();
    //setoran
    List<Map<String, dynamic>> setoran = [];
    // setoran = await db.query('setoran', orderBy:'idsubkategori', where: '$idtglsetor = ?', whereArgs: [idtglsetor]);
    setoran = await db.rawQuery(
        'SELECT * FROM setoran WHERE idtglsetor=?',
        [idtglsetor]);
    //subkategori
    List<Map<String, dynamic>> subkategori = [];
    subkategori = await db.query('daftarsubkategori', orderBy:'id');
    //kategori
    List<Map<String, dynamic>> kategori = [];
    kategori = await db.query('daftarkategori', orderBy:'id');
    //gabung
    List<List<dynamic>> njajal = [];
    setoran.forEach((e) {
      njajal.addAll([[subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(2),
        kategori.firstWhere((element) => element.values.elementAt(0) == subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(1)).values.elementAt(1),
        e.values.elementAt(3),
        subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(3),
        e.values.elementAt(3) * subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(4)
        ]]);
    });
    return njajal;
  }

  // buat pdf di laporan
  static Future<List<List<dynamic>>> buatlaporanPDF(int? idnasabah, int? idkategori, String mulai, String selesai) async {
    final db = await SQLHelper.db();
    //define
    List<Map<String, dynamic>> tglsetor = [];
    List<Map<String, dynamic>> setoran = [];
    String? query;
    //subkategori
    List<Map<String, dynamic>> subkategori = [];
    subkategori = await db.query('daftarsubkategori', orderBy:'id');
    //kategori
    List<Map<String, dynamic>> kategori = [];
    kategori = await db.query('daftarkategori', orderBy:'id');
    //kosongan
    List<List<dynamic>> njajal = [];
    // ambil data
    if(idnasabah==null && idkategori==null){
      //tanggal aja
      tglsetor = await db.rawQuery('SELECT * FROM tglsetor WHERE DATETIME(createdAt) BETWEEN DATETIME(?) AND DATETIME(?)', [mulai, selesai]);
      tglsetor.forEach((e) {
        if(query==null){query = 'idtglsetor=${e.values.elementAt(0).toString()}';}
        else
        {query = '$query OR idtglsetor=${e.values.elementAt(0).toString()}';}
      });
      setoran = await db.rawQuery('SELECT * FROM setoran WHERE $query');
      setoran.forEach((e) {
        njajal.addAll([
          [subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(2),
            kategori.firstWhere((element) => element.values.elementAt(0) == subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(1)).values.elementAt(1),
            e.values.elementAt(3),
            subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(3),
            e.values.elementAt(3) * subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(4)
          ]]);
      });
    }
    else{
      //per kategori
      if(idnasabah!=null && idkategori==null){
        //nasabah
        tglsetor = await db.rawQuery('SELECT * FROM tglsetor WHERE idnasabah=? AND (DATETIME(createdAt) BETWEEN DATETIME(?) AND DATETIME(?))', [idnasabah+1, mulai, selesai]);
        tglsetor.forEach((e) {
          if(e.values.elementAt(1)==idnasabah+1){
            if(query==null){query = 'idtglsetor=${e.values.elementAt(0).toString()}';}
            else
            {query = '$query OR idtglsetor=${e.values.elementAt(0).toString()}';}
          }
        });
        setoran = await db.rawQuery('SELECT * FROM setoran WHERE $query');
        setoran.forEach((e) {
          njajal.addAll([
            [subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(2),
            kategori.firstWhere((element) => element.values.elementAt(0) == subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(1)).values.elementAt(1),
            e.values.elementAt(3),
            subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(3),
            e.values.elementAt(3) * subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(4)
          ]]);
        });
      }
      else{
        //kategori
        if(idnasabah==null && idkategori!=null){
          tglsetor = await db.rawQuery('SELECT * FROM tglsetor WHERE DATETIME(createdAt) BETWEEN DATETIME(?) AND DATETIME(?)', [mulai, selesai]);
          subkategori.forEach((e) {
            if(e.values.elementAt(1)==idkategori+1){
              if(query==null){query = 'idsubkategori=${e.values.elementAt(0).toString()}';}
              else
              {query = '$query OR idsubkategori=${e.values.elementAt(0).toString()}';}
            }
          });
          setoran = await db.rawQuery('SELECT * FROM setoran WHERE ($query) ORDER BY idsubkategori');
          setoran.forEach((e) {
            njajal.addAll([
              [subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(2),
                kategori.firstWhere((element) => element.values.elementAt(0) == subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(1)).values.elementAt(1),
                e.values.elementAt(3),
                subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(3),
                e.values.elementAt(3) * subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(4)
              ]]);
          });
        }
        else{
          //lengkap
          if(idnasabah!=null && idkategori!=null){
            subkategori.forEach((e) {
              if(e.values.elementAt(1)==idkategori+1){
                if(query==null){query = 'idsubkategori=${e.values.elementAt(0).toString()}';}
                else
                {query = '$query OR idsubkategori=${e.values.elementAt(0).toString()}';}
              }
            });
            query = 'SELECT * FROM setoran WHERE ($query) ORDER BY idsubkategori';
            setoran = await db.rawQuery(query.toString());
            tglsetor = await db.rawQuery('SELECT * FROM tglsetor WHERE idnasabah=? AND (DATETIME(createdAt) BETWEEN DATETIME(?) AND DATETIME(?))', [idnasabah+1, mulai, selesai]);
            tglsetor.forEach((etglsetor) {
                setoran.forEach((e) {
                  if(etglsetor.values.elementAt(0)==e.values.elementAt(1)){
                    njajal.addAll([[subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(2),
                      kategori.firstWhere((element) => element.values.elementAt(0) == subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(1)).values.elementAt(1),
                      e.values.elementAt(3),
                      subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(3),
                      e.values.elementAt(3) * subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(4)
                    ]]);
                  }
                });
            });
          }

        }
      }
    }

    // setoran = await db.rawQuery(query.toString());
    // setoran.forEach((e) {
    //   njajal.addAll([[subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(2),
    //     kategori.firstWhere((element) => element.values.elementAt(0) == subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(1)).values.elementAt(1),
    //     e.values.elementAt(3),
    //     subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(3),
    //     e.values.elementAt(3) * subkategori.firstWhere((element) => element.values.elementAt(0) == e.values.elementAt(2)).values.elementAt(4)
    //   ]]);
    // });

    List<List<dynamic>> datanjajal = [];
    for (var i = 0; i < njajal.length; i++) {
      if(datanjajal.isEmpty){datanjajal.insert(0, njajal[0]);}
      else{
        bool ada=false;
        for (var j = 0; j < datanjajal.length; j++) {
          if(njajal[i][0]==datanjajal[j][0] && njajal[i][1]==datanjajal[j][1]){
            datanjajal[j][4]=datanjajal[j][4]+njajal[i][4];
            ada=true;
          }
        }
        if(ada==false){
          datanjajal.insert(datanjajal.length, njajal[i]);
        }
      }
    }
    return datanjajal;
  }


  // Read a single item by id
  // The app doesn't use this method but I put here in case you want to see it
  static Future<List<Map<String, dynamic>>> getItem(int id) async {
    final db = await SQLHelper.db();
    return db.query('nasabah', where: "id = ?", whereArgs: [id], limit: 1);
  }

  // Update an item by id
  static Future<int> updateItem(int id, String nama) async {
    final db = await SQLHelper.db();
    final data = {
      'nama': nama,
    };
    final result = await db.update('nasabah', data, where: "id = ?", whereArgs: [id]);
    return result;
  }

  // Update pengaturan
  static Future<int> updatePengaturan(int id, String nilai) async {
    final db = await SQLHelper.db();
    final data = {
      'nilai': nilai,
    };
    final result = await db.update('pengaturan', data, where: "id = ?", whereArgs: [id]);
    return result;
  }

  //update setoran per biji
  static Future<int> updateSetoran(
      int idtglsetor, int idsubkategori, int jumlah) async {
    final db = await SQLHelper.db();
    final data = {
      'idtglsetor': idtglsetor,
      'idsubkategori': idsubkategori,
      'jumlah': jumlah,
    };
    // cek ada nggak
    final cek = await db.rawQuery(
        'SELECT * FROM setoran WHERE idtglsetor=? and idsubkategori=?',
        [idtglsetor, idsubkategori]);
    if(cek.isNotEmpty){
      //update
      final result = await db.rawUpdate('''
                UPDATE setoran 
                SET jumlah = ?
                WHERE idtglsetor = ?
                AND idsubkategori = ?
                ''',
          [jumlah, idtglsetor, idsubkategori]);
      return result;
    }else{
      //bikin baru
      final result = await db.insert('setoran', data, conflictAlgorithm: sql.ConflictAlgorithm.replace);
      return result;
    }
  }

  // Delete
  static Future<void> deleteItem(int id) async {
    final db = await SQLHelper.db();
    try {
      await db.delete("tglsetor", where: "id = ?", whereArgs: [id]);
    } catch (err) {
      debugPrint("Terjadi kesalahan ketika menghapus...: $err");
    }
  }

  static Future<void> tambahNasabah(String nama, String description) async {
    final db = await SQLHelper.db();
    final data = {
      'nama': nama,
      'description': description,
    };
    await db.insert('nasabah', data, conflictAlgorithm: sql.ConflictAlgorithm.replace);
  }

  static Future<void> tambahTglSetor(int? idnasabah, String createdAt) async {
    final db = await SQLHelper.db();
    final data = {
      'idnasabah': idnasabah,
      'createdAt': createdAt,
    };
    // print(idnasabah.toString());
    // print(createdAt);
    if (idnasabah!=null)  {
      await db.insert('tglsetor', data, conflictAlgorithm: sql.ConflictAlgorithm.replace);
    }

  }

  static Future<void> hapusNasabah(int id) async {
    final db = await SQLHelper.db();
    try {
      await db.delete("nasabah", where: "id = ?", whereArgs: [id]);
    } catch (err) {
      debugPrint("Terjadi kesalahan ketika menghapus...: $err");
    }
  }

  static Future<void> hapusTglSetor(int id) async {
    final db = await SQLHelper.db();
    try {
      await db.delete("tglsetor", where: "id = ?", whereArgs: [id]);
    } catch (err) {
      debugPrint("Terjadi kesalahan ketika menghapus...: $err");
    }
  }

  static Future<void> hapusSubKategori(int id) async {
    final db = await SQLHelper.db();
    try {
      await db.delete("daftarsubkategori", where: "id = ?", whereArgs: [id]);
    } catch (err) {
      debugPrint("Terjadi kesalahan ketika menghapus...: $err");
    }
  }


}

